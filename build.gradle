buildscript {
    ext {
        servicePort = "10080"
        springBootVersion = '2.7.0'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE")
    }
}

subprojects  {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    // 공통 패키지 그룹 및 언어 레벨
    group = 'rest.api.svc'
    sourceCompatibility = '11'

    // 모든 모듈에서 프로퍼티 정의를 먼저 진행한다.
    // sub project 내에 있는 build.gradle 정보를 가져온다.
    project.evaluate()

    // gradle의 프로퍼티값들을 자바 리소스로 가져오기 전에 clean을 해줘서 강제 update 하기 위함.
    compileJava{
        dependsOn clean
    }

    // application.yml 리소스 파일에 프로퍼티값 주입
    processResources {
        filesMatching('**/application.yml') {
            expand(project.properties)
        }
    }

    // compileOnly에 annotationProcessor을 상속시켜서 lombok이 사용할 수 있도록 위함
    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        if(!project.name.contains("module-common")) {
            implementation project(':module-common')
        }

        implementation ('org.springframework.boot:spring-boot-starter')
//        implementation ("org.springframework.boot:spring-boot-starter:${springBootVersion}")
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'

        compileOnly 'org.projectlombok:lombok'

        developmentOnly 'org.springframework.boot:spring-boot-devtools'

        annotationProcessor 'org.projectlombok:lombok'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    test {
        useJUnitPlatform()
    }
}
